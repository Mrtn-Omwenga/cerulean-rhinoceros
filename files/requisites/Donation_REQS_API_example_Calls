


Insert Wallet
	POST -  http://localhost:8080/wallet/insert
	Content-Type: application/json 

	// Example 1
	inputJSON: 
	{
		"ownerId": "u102john2021",
		"crmOwnerId": "CRM111111john2021",
		"ownerType": "IND",   	// IND, ORG, ZEW
		"missionId": "",
		"walletType": "IN_Overheads", // IN_Mission, OUT_Mission, IN_Overheads, OUT_Overheads, IN_Development, OUT_Development, IN_Services, OUT_Services, PROFITS, OUT_Fees
		"availableAmount": "0.00",
		"totalAmount":"0.00",
		"currency": "EUR"
	}

	outputJSON:
	{
		"id": "203cq7e52058a1df89009130"
	}
	
	// Example 2
	inputJSON: 
	{
		"ownerId": "u001admin2021",
		"crmOwnerId": "CRM00001admin2021",
		"ownerType": "ZEW",   	// IND, ORG, ZEW
		"missionId": "",
		"walletType": "OUT_Overheads",
		"availableAmount": "0.00",
		"totalAmount":"0.00",
		"currency": "EUR"
	}

	outputJSON:
	{
		"id": "003hje51028a1kap90iqj30"
	}
	
	// Example 3
	inputJSON: 
	{
		"ownerId": "u102john2021",
		"crmOwnerId": "CRM111111john2021",
		"ownerType": "IND",   	
		"missionId": "m0001",
		"walletType": "IN_Mission",
		"availableAmount": "0.00",
		"totalAmount":"0.00",
		"currency": "EUR"
	}

	outputJSON:
	{
		"id": "103cq7e52058a1df89009131"
	}
	
	
	
	
Get Wallet
	GET -  http://localhost:8080/wallet/{id}  // Ex: http://localhost:8080/wallet/203cq7e52058a1df89009130
	Content-Type: application/json 

	outputJSON:
	{
		"ownerId": "u102john2021",
		"crmOwnerId": "CRM111111john2021",
		"ownerType": "IND",   	
		"missionId": "",
		"walletType": "IN_Overheads",
		"availableAmount": "0.00",
		"totalAmount":"0.00",
		"currency": "EUR"
	}

Update Wallet Amounts (Increment/Decrement total and/or available amounts)
	PUT -  http://localhost:8080/wallet/{id}/updateAmounts 
	(ID of the wallet being updated is sent in the body)
	Content-Type: application/json 

	// Example to Increment both the Available and the Total amounts
	InputJSON
	{ 
		// Pass the ID through the URL "id": "203cq7e52058a1df89009130",
		"availableAmount":"15.00",
		"totalAmount":"15.00",
		"operation":"INCREMENT" // INCREMENT / DECREMENT
	}

	responseCode 200

	// Example to decrement only the available amount
	InputJSON
	{ 
		"id": "203cq7e52058a1df89009130",
		"availableAmount":"1.00",
		"operation":"DECREMENT" // INCREMENT / DECREMENT
	}

	responseCode 200


// Less priority
List Wallet balances (for Backoffice)
	// 1. Example for the IN_OVERHEADS. 
	//   1.1 Get all Wallets where WalletType = "IN_OVERHEADS". 
	//   1.2 Sum the AvailableAmount and TotalAmount of all entries returned. 
	// 2. Example for the OUT_OVERHEADS. 
	//   2.1 Get and return the Wallet where WalletType = "OUT_OVERHEADS". 
	// 3. Example for the IN_Mission where MissionsId= M001
	//   3.1 Get all Wallets where WalletType = "IN_MISSION" and missionId=M001. 
	//   3.2 Sum the AvailableAmount and TotalAmount of all entries returned. 

	GET -  http://localhost:8080/wallet/list
	Content-Type: application/json 

	// Filters
	InputJSON
	{ 
		"walletType": "IN_Overheads", // MANDATORY. Can be 1 or more WalletTypes, separated by comma
		"missionId": "" // optional
	}
	
	outputJSON:
	{
		"result": {
				"missionId": "",
				"walletType": "IN_Overheads",
				"availableAmount": "380.00",
				"totalAmount":"1240.00",
				"currency": "EUR",
				"id": "" // only filled when is a OUT_xxxxx type (single wallet)
			}
		
		]
		
	}


#############################################
#############################################
#############################################
##########      REVENUES    #################
#############################################
#############################################
#############################################

Insert Revenue
	POST -  http://localhost:8080/revenue/insert
	Content-Type: application/json 

	// Example of inserting the revenue in the wallet (walletType=IN_MISSION) of the Mission John chose.
	inputJSON: 
	{
		"ownerId": "u102john2021",
		"crmOwnerId": "CRM111111john2021",
		"toWalletId":"103cq7e52058a1df89009131",
		"amount":"39.63",
		"currency": "EUR",
		"source ":"PAYME_visa",
		"transactionId":"tran010101010101",
		"timestamp":"2021-06-11T19:31:31.000+00:00",
		"invoiceId":"",
		"originalAmount":"48",
		"originalCurrency":"USD",
		"currencyConversion":"1.21120",
	}

	outputJSON:
	{
		"id": "21cfe570512adaf4101231"
	}


	// Example2: Part of the Donation made by John is for his wallet of type IN_Overheads.
	inputJSON: 
	{
		"ownerId": "u102john2021",
		"crmOwnerId": "CRM111111john2021",
		"toWalletId":"203cq7e52058a1df89009130",
		"amount":"4.95",
		"currency": "EUR",
		"source ":"PAYME_visa",
		"transactionId":"tran010101010101",
		"timestamp":"2021-06-11T19:31:31.000+00:00",
		"invoiceId":"",
		"originalAmount":"6",
		"originalCurrency":"USD",
		"currencyConversion":"1.21120"
	}

	outputJSON:
	{
		"id": "21cfe570512adaf4101231"
	}


// Example:
// JOHN donates 100€ in March
// -> generate 3 entries in Revenues (1 Overhads, 1 Dev, 1 Mission M01)

// John donated 60€ in April
// -> generated 4 entries (have the same TransID) in Revenues (1 Ovh, 1 Dev, 1 Missin M01, 1 Mission m2)
//   - Revenue (5€, Timestamp T1; TransID_T001, WALLET IN_OVERHEADS)
//   - Revenue (5€, Timestamp T1; TransID_T001, WALLET IN_DEV)
//   - Revenue (25€, Timestamp T1; TransID_T001, WALLET IN_Mission, m01)
//   - Revenue (25€, Timestamp T1; TransID_T001, WALLET IN_Mission, m02)
// SUM of the 4 above = 60 EUR
//  TOTAL : 160€

Get financial data (overview data)
	GET -  http://localhost:8080/financials/overview
	Content-Type: application/json 

	inputJSON: 
	{
		"ownerId": "u102john2021",
		"currency": "USD",
		"year": "2021"
	}

	outputJSON:
	{
		// Entries[] = get all the entries in "Revenues" for this ownwer and for the Year 'year'.
		
		// Get the SubEntries[] = sub list of Entries[] with the entries that have the same 
		//  transactionId with the most recent Timestamp. 
		"lastDonation": { 
			"amount":"60.00", // sum of the amounts of all items in SubEntries[] 
			"currency":"USD"
		},
		"totals": {
			"amount":"240.00", // sum of the amounts of all items in Entries[]
			"currency":"USD",
			"year": "2021"
		},
		// Average monthly donation amount this year. 
		// EntriesByMonth = GroupByMonth ( Entries[] )
		// Avg ( each member of sumOfMonth(EntriesByMonth) )
		"average": {
			"amount":"42.00",
			"currency": "USD",
			"year": "2021"
		}
	}




#############################################
#############################################
#############################################
#############################################
##########      TRANSACTIONS    #############
#############################################
#############################################


Insert Transaction (use money from Overheads - pay the bill of water)
	POST -  http://localhost:8080/transaction/insert
	Content-Type: application/json 

	inputJSON: 
	{
		"timestamp":"2021-06-11T19:31:31.000+00:00",
		"senderWalletId": "203cq7e52058a1df89009130",
		"receiverWalletId": "003hje51028a1kap90iqj30",
		"amount":"10.50",
		"currency": "EUR",
		"source ":"BANK_BCP", // WALLETS, PAYPAL_BANK, BANK_BCP
		"expenseId":"inv_w001",
		"descriptionCode":"expenses.overheads.infrastructure.water",
		"revenueId":"",
		"originalAmount":"10.50",
		"originalCurrency":"EUR",
		"currencyConversion":"1"
	}

	outputJSON:
	{
		"id": "a1apq5917463adhq4100972"
	}


Get Transaction
	GET -  http://localhost:8080/transaction/{id}   // Ex: http://localhost:8080/transaction/a1apq5917463adhq4100972
	Content-Type: application/json 
	

	outputJSON:
	{
		"id":"a1apq5917463adhq4100972",
		"timestamp":"2021-06-11T19:31:31.000+00:00",
		"senderWalletId": "203cq7e52058a1df89009130",
		"receiverWalletId": "003hje51028a1kap90iqj30",
		"amount":"10.50",
		"currency": "EUR",
		"source ":"BANK_BCP", // WALLETS, PAYPAL_BANK, BANK_BCP
		"expenseId":"inv_w001",
		"descriptionCode":"expenses.overheads.infrastructure.water",
		"revenueId":"",
		"originalAmount":"10.50",
		"originalCurrency":"EUR",
		"currencyConversion":"1"
	}





#############################################
#############################################
#############################################
#############################################
##########      DONATIONS       #############
#############################################
#############################################


Insert Donation (the distribution of the Donation among CostCenters was previously done.)
	POST -  http://localhost:8080/donation/insert
	Content-Type: application/json 

	inputJSON: 
	{
		"transactionTimestamp":"2021-06-11T19:31:31.000+00:00",
		"transactionId":"7MB27930VA981832YK2PHN7Q",
		"ownerId": "u102john2021",
		"crmOwnerId": "CRM111111john2021",
		"source ":"PAYME_visa", 
		"totalAmount":"100",
		"currency": "EUR",
		"originalAmount":"120",
		"originalCurrency":"USD",
		"currencyConversion":"1.2",
		"distribution":{
			"overheads": {
				"amount":"10.00",
				"currency": "EUR"
			},
			"development": {
				"amount":"10.00",
				"currency": "EUR"
			},
			"missions": [
				{
					"missionId":"M001",
					"amount":"80.00",
					"currency": "EUR"
				}
		}
		
	}

// EXPLANATION: Following the example, function needs to: 
 // Get John's Wallets IDs for: IN_Overheads, IN_Development, IN_Mission (M001)
 // If John doesn't have those Wallets that are needed, the system has to create those Wallets (/wallet/insert/).
 // (1) Insert (/revenue/insert with TransactionId 7MB27930VA981832YK2PHN7Q) new entry 
 //   of REVENUE associated to the Wallets of John (in this case we need to create
 //   3 new entries: 10€ IN_Overheads, 10€ IN_Development, 80€ IN_Mission (M001)).
 // (2) Update the wallets amounts (/wallet/updateAmounts ).
		Update John's Wallet of type IN_Overheads.availableAmount += 10€
		Update John's Wallet of type IN_Development.availableAmount += 10€
		Update John's Wallet of type IN_Mission.availableAmount += 80€ ........
 
	responseCode 200
	








Use Amount
// After we paid an invoice/expense, we need to link the amount to some Donations of the same type of Cost Center
	POST -  http://localhost:8080/donation/use
	Content-Type: application/json 

	inputJSON: 
	{
		"costCenter":"OVERHEADS", // Can also be MISSION or DEVELOPMENT, besides OVERHEADS
		"missionId":"", // only filled if costCenter=MISSION
		"amount":"100",
		"currency":"EUR",
		"expenseId": "E91919",
		"revenueId":"",
		"descriptionCode":"expenses.overheads.facilities.water",
		"source":"BANK_BCP",
	}
	
	responseCode 200
	
// EXPLANATION: Function need to use money from the right Wallets (based on Wallet Type and availableAmount)....
//  - Find Wallets of type IN_OVERHEADS that all together have more than 100 eur in Overheads Available to be used.
//  - For each Wallet found: 
		(1) Create Transaction "/transactions/insert" between that wallet and the ZEW Wallet of type OUT_Overheads 
		  (because here we are talking about Overheads). 
			If costCenter was "DEVELOPMENT", then the ZEW Wallet of type OUT_Development
			If costCenter was "MISSION", then the ZEW Wallet of type OUT_Mission with MissionId=input received.
		(2) Update the AvailableAmount in the wallets (decrement availableAmount in IN_xxxxx, increment the totalAmount in the OUT_xxxxx)
	